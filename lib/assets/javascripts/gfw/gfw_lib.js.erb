function GFW() {
  var args = Array.prototype.slice.call(arguments),
      callback = args.pop(),
      modules = (args[0] && typeof args[0] === 'string') ? args : args[0],
      config,
      i;

  if (!(this instanceof GFW)) {
    return new GFW(modules, callback);
  }

  if (!modules || modules === '*') {
    modules = [];

    for (i in GFW.modules) {
      if (GFW.modules.hasOwnProperty(i)) {
        modules.push(i);
      }
    }
  }

  for (i = 0; i < modules.length; i += 1) {
    GFW.modules[modules[i]](this);
  }

  callback(this);

  return this;
}


GFW.modules = {};

GFW.modules.app = function(gfw) {
  gfw.app = {};

  gfw.app.Instance = Class.extend({
    init: function(map, options) {
      var that = this;

      this.options = _.defaults(options, {
        user       : 'wri-01',
        layerTable : 'layerinfo_dev_copy'
      });

      this.layers = [];
      this.cloudfront_url = 'dyynnn89u7nkm.cloudfront.net';
      this.global_version = 5;

      gfw.log.enabled = options ? options.logging : false;

      this.$map_coordinates = $('.map_coordinates');

      this.infowindow          = new CartoDBInfowindow(map);
      this.protectedInfowindow = new ProtectedInfowindow(map);
      this.storiesInfowindow   = new CartoDBInfowindow(map, { className: 'story_infowindow', width: 215 });
      this.mongabayInfowindow  = new CartoDBInfowindow(map, { className: 'story_infowindow', width: 215 });

      this.queries = {};

      this.storiesMarkers = [];
      this.storiesLoaded = false;

      this.mongabayMarkers = [];
      this.mongabayLoaded = false;
      this.mongabayHidden = false;
      this.mc = {};

      this.lastHash = null;

      this._cartodb   = Backbone.CartoDB({ user: this.options.user });
      this.datalayers = new gfw.datalayers.Engine(this._cartodb, options.layerTable);

      // Layers
      this.mainLayer          = null;
      this.specialLayer       = null;
      this.pantropicalLayer   = null;
      this.umdCoverageLayer   = null;
      this.forest2000Layer    = null;
      this.forestGainLayer    = null;

      this.currentBaseLayer = config.BASELAYER;
    },

    closeInfowindows: function() {
      this.infowindow.close();
      this.protectedInfowindow.close();
      this.storiesInfowindow.close();
      this.mongabayInfowindow.close();
    },

    hideMarkers: function() {
      this._hideMongabayLayer();
      this._hideStoriesMarkers();
    },

    updateCoordinates: function() {
      var lat = parseFloat(map.getCenter().lat()).toFixed(6),
          lng = parseFloat(map.getCenter().lng()).toFixed(6);

      this.$map_coordinates.html('Lat/Long: '+lat + ',' + lng);

      publish('timeline:update_coordinates');
    },

    loadLayer: function(layer) {
      var id = layer.get('id');

      this.addLayer(layer);
      layer.set('visible', true);

      Filter.check(id);

      if (layer.get('id') !== 596) Legend.toggleItem(id, layer.get('category_slug'), layer.get('category_name'), layer.get('title'), layer.get('slug'), layer.get('category_color'), layer.get('title_color'));
    },

    run: function() {
      this._setupListeners();

      gfw.log.info('App is now running!');
    },

    open: function() {
      var that = this;

      var dh   = $(window).height() + 67,
          hh   = $('.header').height(),
          $map = $('#map');

      $map.animate({ height: dh - hh }, 250, function() {
        google.maps.event.trigger(map, 'resize');
        map.setOptions({ scrollwheel: true });
      });

      this._goTo($map, { margin: '67' },updateHash);
    },

    close: function(callback) {
      var that = this;

      $('#map').animate({ height: 400 }, 250, function() {
        google.maps.event.trigger(map, 'resize');
        map.setOptions({ scrollwheel: false });

        callback && callback();
      });

      this._goTo($('body'));
    },

    _goTo: function($el, opt, callback) {
      if ($el) {
        var speed  = (opt && opt.speed)  || 400;
        var delay  = (opt && opt.delay)  || 100;
        var margin = (opt && opt.margin) || 0;

        $('html, body').delay(delay).animate({scrollTop:$el.offset().top - margin}, speed, function(){
            callback && callback()
        });

      }
    },

    _setupZoom: function() {
      var overlayID = document.getElementById('zoom_controls');

      // zoomIn
      var zoomInControlDiv = document.createElement('DIV');
      overlayID.appendChild(zoomInControlDiv);

      var zoomInControl = new this._zoomIn(zoomInControlDiv, map);
      zoomInControlDiv.index = 1;

      // zoomOut
      var zoomOutControlDiv = document.createElement('DIV');
      overlayID.appendChild(zoomOutControlDiv);

      var zoomOutControl = new this._zoomOut(zoomOutControlDiv, map);
      zoomOutControlDiv.index = 2;
    },

    _zoomIn: function(controlDiv, map) {
      controlDiv.setAttribute('class', 'zoom_in');

      google.maps.event.addDomListener(controlDiv, 'mousedown', function() {
        var zoom = map.getZoom() + 1;

        if (zoom < 20) {
          map.setZoom(zoom);
        }
      });
    },

    _zoomOut: function(controlDiv, map) {
      controlDiv.setAttribute('class', 'zoom_out');

      google.maps.event.addDomListener(controlDiv, 'mousedown', function() {
        var zoom = map.getZoom() - 1;

        if (zoom > 2) {
          map.setZoom(zoom);
        }
      });
    },

    _setupListeners: function() {
      var that = this;

      this._setupZoom();

      $(document).on('click', '.close', function(e) {
        e.preventDefault();
      });

      google.maps.event.addListener(map, 'center_changed', function() {
        that.updateCoordinates();
      });

      google.maps.event.addListener(map, 'zoom_changed', function() {
        that.updateCoordinates();
        updateHash();
      });

      google.maps.event.addListener(map, 'dragstart', function() {
        $('#viewfinder').hide();
        $('#spinner_tiles').fadeIn();
      });

      google.maps.event.addListener(map, 'dragend', function() {
        that.updateCoordinates();
        updateHash();
      });

      google.maps.event.addDomListener(window, 'resize', function() {
        that.updateCoordinates();
        updateHash();
      });

      google.maps.event.addListener(map, 'click', function(event) {
        that.closeInfowindows();

        if (!that.specialLayer) { return; }

        var // get click coordinates
        lat = event.latLng.lat(),
        lng = event.latLng.lng(),
        params = { lat: lat, lon: lng },
        url = "//<%= ENV['GFW_API_HOST'] %>/wdpa/sites";

        executeAjax(url, params, {
          success: function(sites) {
            var site = null;

            if (sites && sites.length > 0) {
              var site = sites[0];

              that.protectedInfowindow.setContent(site);
              that.protectedInfowindow.setPosition(event.latLng);
              that.protectedInfowindow.open();
            }
          },
          error: function(e) {
            console.error('WDPA API call failed', e, url);
          }
        });
      });

      google.maps.event.addListener(map, 'tilesloaded', this._mapLoaded);
    },

    removeLayer: function(layer) {
      if (layer.get('external')) {
        var table_name = layer.get('table_name');

        if (table_name == 'protected_areas') { this._removeSpecialLayer(); }
        if (table_name == 'pantropical') { this._removePantropicalLayer(); }
        if (table_name == 'forest2000') { this._removeForest2000Layer(); }
        if (table_name == 'forestgain') {
          this.layers = _.without(this.layers, layer.get('table_name'));

          this._removeForestGainLayer();
        }
      } else {
        this.layers = _.without(this.layers, layer.get('table_name'));
        this.renderLayers();
      }
    },

    removeSubLayer: function(layer) {
      this.layers = _.without(this.layers, layer.get('sublayer'));
      this.renderLayers();
    },

    addSubLayer: function(layer) {
      this.layers.push(layer.get('sublayer'));
      this.renderLayers();
    },

    addLayer: function(layer) {
      if (layer.get('external')) {
        var table_name = layer.get('table_name');

        if (table_name == 'protected_areas') { this._renderExternalLayer(); }
        if (table_name == 'pantropical') { this._renderPantropicalLayer(); }
        if (table_name == 'forest2000') { this._renderForest2000Layer(); }
        if (table_name == 'forestgain') { this._renderForestGainLayer(); }
      } else {
        this.layers.push(layer.get('table_name'));
        this.renderLayers();
      }
    },

    _removeSpecialLayer: function() {
      if (this.specialLayer) {
        this.specialLayer.setOpacity(0);
        this.specialLayer = null;
      }
    },

    _removePantropicalLayer: function() {
      if (this.pantropicalLayer) {
        this.pantropicalLayer.setOpacity(0);
        this.pantropicalLayer = null;
      }
    },

    _removeForest2000Layer: function() {
      if (this.forest2000Layer) {
        this.forest2000Layer.hide();
        // var layers = map.overlayMapTypes.getArray();

        // for (var i = 0; i <= layers.length; i++) {
        //   if (layers[i] == this.forest2000Layer) {
        //     if (this.forest2000Layer) {
        //       this.forest2000Layer.setOpacity(0);
        //       this.forest2000Layer = null;
        //       map.overlayMapTypes.setAt(i, null);
        //     }
        //   }
        // }
      }
    },

    removeUmdCoverageLayer: function() {
      if (this.umdCoverageLayer) {
        var layers = map.overlayMapTypes.getArray();

        for (var i = 0; i <= layers.length; i++) {
          if (layers[i] == this.umdCoverageLayer) {
            if (this.umdCoverageLayer) {
              this.umdCoverageLayer.setOpacity(0);
              this.umdCoverageLayer = null;
              map.overlayMapTypes.setAt(i, null);
            }
          }
        }
      }
    },

    _removeForestGainLayer: function() {
      if (this.forestGainLayer) {
        var layers = map.overlayMapTypes.getArray();

        for (var i = 0; i <= layers.length; i++) {
          if (layers[i] == this.forestGainLayer) {
            if (this.forestGainLayer) {
              this.forestGainLayer.setOpacity(0);
              this.forestGainLayer = null;
              map.overlayMapTypes.setAt(i, null);
            }
          }
        }
      }
    },

    _renderExternalLayer: function() {
      if (this.specialLayer) {
        this.specialLayer.setOpacity(1);
      } else {

        this.specialLayer = new google.maps.ImageMapType({
          getTileUrl: function(tile, zoom) {
            return 'http://184.73.201.235/blue/' + zoom + '/' + tile.x + '/' + tile.y;
          },
          tileSize: new google.maps.Size(256, 256),
          opacity: .6,
          isPng: true
        });

        map.overlayMapTypes.insertAt(0, this.specialLayer);
      }
    },

    _renderPantropicalLayer: function() {
      if (this.pantropicalLayer) {
        this.pantropicalLayer.setOpacity(1);
      } else {
        this.pantropicalLayer = new google.maps.ImageMapType({
          getTileUrl: function(tile, zoom) {
            return "//<%= ENV['GFW_API_HOST'] %>/gee/masked_forest_carbon/" + zoom + "/" + tile.x + "/" + tile.y + ".png";
          },
          tileSize: new google.maps.Size(256, 256),
          opacity: 1,
          isPng: true
        });

        map.overlayMapTypes.insertAt(0, this.pantropicalLayer);
      }
    },

    renderUmdCoverageLayer: function() {
      if (this.umdCoverageLayer) {
        this.umdCoverageLayer.setOpacity(1);
      } else {
        function CoordMapType() { }

        CoordMapType.prototype.tileSize = new google.maps.Size(256,256);
        CoordMapType.prototype.maxZoom = 17;
        CoordMapType.prototype.setOpacity = function(opacity) {
          $('.pink_tree').css('opacity', opacity);
        };

        CoordMapType.prototype.getTile = function(coord, zoom, ownerDocument) {
          var x = coord.x;
          var y = coord.y;
          var z = zoom;

          var zsteps = zoom - 12;

          if (zoom > 12) {
            x = Math.floor(coord.x/(Math.pow(2, zoom - 12)));
            y = Math.floor(coord.y/(Math.pow(2, zoom - 12)));
            z = 12;
          } else {
            y = (y > Math.pow(2,z) ? y % Math.pow(2,z) : y);
            
            if (x >= Math.pow(2,z)) {
              x = x % Math.pow(2,z);
            } else if (x < 0) {
              x = Math.pow(2,z) - Math.abs(x);
            }
          }

          var url = 'http://earthengine.google.org/static/hansen_2013/gfw_pink_tree/' + z + '/' + x + '/' + y + '.png';

          var image = new Image();
          image.src = url;
          image.className += 'pink_tree';

          if (zsteps <= 0) return image;

          image.width = 256 * Math.pow(2, zsteps);
          image.height = 256 * Math.pow(2, zsteps);

          if (zsteps > 0) {
            var srcX = 256 * (coord.x % Math.pow(2, zsteps));
            var srcY = 256 * (coord.y % Math.pow(2, zsteps));

            image.style.position = 'absolute';
            image.style.top      = -srcY + 'px';
            image.style.left     = -srcX + 'px';
          }

          var div = ownerDocument.createElement('div');
          div.appendChild(image);
          div.style.width = this.tileSize.width + 'px';
          div.style.height = this.tileSize.height + 'px';
          div.style.position = 'relative';
          div.style.overflow = 'hidden';
          div.className += 'pink_tree';

          return div;
        };

        CoordMapType.prototype.name = 'Tile #s';
        CoordMapType.prototype.alt = 'Tile Coordinate Map Type';

        this.umdCoverageLayer = new CoordMapType();
        map.overlayMapTypes.insertAt(0, this.umdCoverageLayer);
      }
    },

    _renderForest2000Layer: function() {
      if (this.forest2000Layer) {
        this.forest2000Layer.show();

      } else {

        this.forest2000Layer = Forest2000.init(map, function() {
          // GFW.app._removeForest2000Layer();
          // GFW.app._renderForest2000Layer();
        });
      }

      // if (this.forest2000Layer) {
      //   this.forest2000Layer.setOpacity(1);
      // } else {
      //   function CoordMapType() { }

      //   CoordMapType.prototype.tileSize = new google.maps.Size(256,256);
      //   CoordMapType.prototype.maxZoom = 17;
      //   CoordMapType.prototype.setOpacity = function(opacity) {
      //     $('.tree_alpha').css('opacity', opacity);
      //   };

      //   CoordMapType.prototype.getTile = function(coord, zoom, ownerDocument) {
      //     var x = coord.x;
      //     var y = coord.y;
      //     var z = zoom;

      //     var zsteps = zoom - 12;

      //     if (zoom > 12) {
      //       x = Math.floor(coord.x/(Math.pow(2, zoom - 12)));
      //       y = Math.floor(coord.y/(Math.pow(2, zoom - 12)));
      //       z = 12;
      //     } else {
      //       y = (y > Math.pow(2,z) ? y % Math.pow(2,z) : y);
            
      //       if (x >= Math.pow(2,z)) {
      //         x = x % Math.pow(2,z);
      //       } else if (x < 0) {
      //         x = Math.pow(2,z) - Math.abs(x);
      //       }
      //     }

      //     var url = 'http://earthengine.google.org/static/hansen_2013/tree_alpha/' + z + '/' + x + '/' + y + '.png';

      //     var image = new Image();
      //     image.src = url;
      //     image.className += 'tree_alpha';

      //     if (zsteps <= 0) return image;

      //     image.width = 256 * Math.pow(2, zsteps);
      //     image.height = 256 * Math.pow(2, zsteps);

      //     if (zsteps > 0) {
      //       var srcX = 256 * (coord.x % Math.pow(2, zsteps));
      //       var srcY = 256 * (coord.y % Math.pow(2, zsteps));

      //       image.style.position = 'absolute';
      //       image.style.top      = -srcY + 'px';
      //       image.style.left     = -srcX + 'px';
      //     }

      //     var div = ownerDocument.createElement('div');
      //     div.appendChild(image);
      //     div.style.width = this.tileSize.width + 'px';
      //     div.style.height = this.tileSize.height + 'px';
      //     div.style.position = 'relative';
      //     div.style.overflow = 'hidden';
      //     div.className += 'tree_alpha';

      //     return div;
      //   };

      //   CoordMapType.prototype.name = 'Tile #s';
      //   CoordMapType.prototype.alt = 'Tile Coordinate Map Type';

      //   this.forest2000Layer = new CoordMapType();
      //   map.overlayMapTypes.insertAt(0, this.forest2000Layer);
      // }
    },

    _renderForestGainLayer: function() {
      if (this.forestGainLayer) {
        this.forestGainLayer.setOpacity(1);
      } else {
        function CoordMapType() { }

        CoordMapType.prototype.tileSize = new google.maps.Size(256,256);
        CoordMapType.prototype.maxZoom = 19;
        CoordMapType.prototype.setOpacity = function(opacity) {
          $('.gain_alpha').css('opacity', opacity);
        };

        CoordMapType.prototype.getTile = function(coord, zoom, ownerDocument) {
          var x = coord.x;
          var y = coord.y;
          var z = zoom;

          var zsteps = zoom - 12;

          if (zoom > 12) {
            x = Math.floor(coord.x/(Math.pow(2, zoom - 12)));
            y = Math.floor(coord.y/(Math.pow(2, zoom - 12)));
            z = 12;
          } else {
            y = (y > Math.pow(2,z) ? y % Math.pow(2,z) : y);
            
            if (x >= Math.pow(2,z)) {
              x = x % Math.pow(2,z);
            } else if (x < 0) {
              x = Math.pow(2,z) - Math.abs(x);
            }
          }

          var url = 'http://earthengine.google.org/static/hansen_2013/gain_alpha/' + z + '/' + x + '/' + y + '.png';

          var image = new Image();
          image.src = url;
          image.className += 'gain_alpha';

          if (zsteps <= 0) return image;

          image.width = 256 * Math.pow(2, zsteps);
          image.height = 256 * Math.pow(2, zsteps);

          if (zsteps > 0) {
            var srcX = 256 * (coord.x % Math.pow(2, zsteps));
            var srcY = 256 * (coord.y % Math.pow(2, zsteps));

            image.style.position = 'absolute';
            image.style.top      = -srcY + 'px';
            image.style.left     = -srcX + 'px';
          }

          var div = ownerDocument.createElement('div');
          div.appendChild(image);
          div.style.width = this.tileSize.width + 'px';
          div.style.height = this.tileSize.height + 'px';
          div.style.position = 'relative';
          div.style.overflow = 'hidden';
          div.className += 'gain_alpha';

          return div;
        };

        CoordMapType.prototype.name = 'Tile #s';
        CoordMapType.prototype.alt = 'Tile Coordinate Map Type';

        this.forestGainLayer = new CoordMapType();
        map.overlayMapTypes.push(this.forestGainLayer);
      }
    },

    renderLayers: function() {
      if (this.layers.length > 0) {
        var template = "SELECT cartodb_id||':' ||'{{ table_name }}' as cartodb_id, the_geom_webmercator, '{{ table_name }}' AS name FROM {{ table_name }}";

        var queryArray = _.map(this.layers, function(layer) {
          return _.template(template, { table_name: layer });
        });

        queryArray.push("(SELECT cartodb_id||':' ||'caf_lc_1' as cartodb_id, the_geom_webmercator, 'caf_lc_1' AS name FROM caf_lc_1 LIMIT 0)") //a hack for the stupid layer show hide discoloration thing I found
        var query = queryArray.join(' UNION ALL ');

        this.mainLayer && this.mainLayer.setMap(null);

        this.mainLayer = new CartoDBLayer({
          map: map,
          user_name: '',
          tiler_domain: this.cloudfront_url,
          sql_domain: this.cloudfront_url,
          extra_params: { v: this.global_version, cache_policy: 'persist' }, //define a verison number on requests
          tiler_path: '/tiles/',
          tiler_suffix: '.png',
          tiler_grid: '.grid.json',
          table_name: 'gfw2_layerstyles_v4',
          query: query,
          layer_order: 0,
          opacity: 1,
          interactivity: 'cartodb_id',
          featureClick: this._onMainLayerClick,
          featureOver: function(ev, latlng, pos, data) { map.setOptions({ draggableCursor: 'pointer' }); },
          featureOut: function() { map.setOptions({ draggableCursor: 'default' }); },
          debug: false,
          auto_bound: false
        });

        this.mainLayer.setInteraction(true);

        if (cover_extent.attributes['visible']) GFW.app._refreshForest2000Layer();
      } else {
        if (this.mainLayer) {
          this.mainLayer.setOpacity(0);
          this.mainLayer.setInteraction(false);
        }
      }
    },

    _onMainLayerClick: function(ev, latlng, pos, data) {
      if (Analysis.model.get('analyzing')) return;

      //we needed the cartodb_id and table name
      var pair = data.cartodb_id.split(':');

      if (pair[1] === 'world_ifl') return;

      //here i make a crude request for the columns of the table
      //nulling out the geoms to save payload
      var request_sql = 'SELECT *, null as the_geom, null as the_geom_webmercator FROM ' + pair[1] + ' WHERE cartodb_id = ' + pair[0];
      var url = 'http://dyynnn89u7nkm.cloudfront.net/api/v2/sql?q=' + encodeURIComponent(request_sql);

      var makeSuccessCallback = function(pairs) {
        return function(json) {
          if (!json || (json && !json.rows)) return;

          delete json.rows[0]['cartodb_id'],
          delete json.rows[0]['the_geom'];
          delete json.rows[0]['the_geom_webmercator'];
          delete json.rows[0]['created_at'];
          delete json.rows[0]['updated_at'];

          var data = _.clone(json.rows[0]);
          var content_data = json.rows[0];

          if ($.isEmptyObject(data)) return;

          for (var key in content_data) {
            var temp;

            if (content_data.hasOwnProperty(key)) {
              temp = content_data[key];
              delete content_data[key];
              key = key.replace(/_/g,' '); //add spaces to key names
              content_data[key.charAt(0).toUpperCase() + key.substring(1)] = temp; //uppercase
            }
          }

          if (data) {
            if ( pair[1] == 'biodiversity_hotspots' ) {
              GFW.app.infowindow.setMode('image')
              GFW.app.infowindow.setVisibleColumns(['description', 'photo_credit']);
              GFW.app.infowindow.setContent(data);
            } else {
              GFW.app.infowindow.setMode('normal')
              GFW.app.infowindow.setVisibleColumns();
              GFW.app.infowindow.setContent(content_data);
            }

            GFW.app.infowindow.setPosition(latlng);
            GFW.app.infowindow.open();
          }
        }
      }

      var onSuccess = makeSuccessCallback(pair);

      $.ajax({
        async: false,
        dataType: 'jsonp',
        crossDomain: true,
        jsonpCallback:'iwcallback',
        url: url,
        success: onSuccess,
        error: function(xhr, status, c) {
          console.log('Error', xhr, status, c);
        }
      });
    },

    _getTableName: function(layerName) {
      if (layerName === 'forma') {
        return 'gfw2_forma';
      } else if (layerName === 'modis') {
        return 'modis_forest_change_copy';
      } else if (layerName === 'imazon') {
        return 'imazon_clean2';
      } else if (layerName === 'loss') {
        return 'gfw_loss_year';
      } else if (layerName === 'fires') {
        return 'global_7d';
      }

      return null;
    },

    updateBaseLayer: function(baselayer) {
      this.currentBaseLayer = config.BASELAYER = baselayer;

      this._toggleTimeLayer();
      this._loadBaseLayer();

      publish('timeline:change_baselayer', [this.currentBaseLayer]);

      Analysis.info.model.set({
        'baselayer': this.currentBaseLayer,
        'subdisabled': true
      });
    },

    _toggleStoriesLayer: function(layer) {
      layer.set('visible', !layer.get('visible'));
      GFW.app.storiesLoaded = true;

      if (!layer.get('visible')) {
        this.storiesInfowindow.close();
        GFW.app.storiesLoaded = false;
      }

      _.each(this.storiesMarkers, function(marker) {
        marker.toggle();
      });

      Filter.toggle(layer.get('id'));

      updateHash();
    },

    _hideStoriesMarkers: function() {
      _.each(this.storiesMarkers, function(marker) {
        marker.hide();
      });
    },

    _showStoriesMarkers: function() {
      if (GFW.app.storiesLoaded){
        _.each(this.storiesMarkers, function(marker) {
          marker.show();
        });
      }
    },

    _loadStoriesLayer: function() {
      if (!GFW.app.storiesLoaded) return;
      var that = this;

      $.ajax({
        async: false,
        url: '/stories.json?for_map=true',
        success: function(data) {
          _.each(data, function(story) {
            var lat = story.lat,
                lng = story.lng,
                position = new google.maps.LatLng(lat, lng),
                thumb = story.media[1] ? story.media[1].preview_url : '',
                icon = '<%= image_path "icons/marker_exclamation.png" %>',
                properties = null,
                title = story.title;

            if (title.length > 34) {
              title = $.trim(title).substring(0, 34).split(' ').slice(0, -1).join(' ') + '...';
            }

            var content = "<strong><a href='/stories/"+story.id+"'>"+title+"</a></strong> <span>by "+story.name+" &middot; </span><a href='/stories/"+story.id+"'>read more</a>";

            marker = new GFWMarker({
              position: position,
              icon: icon,
              thumbnail_url: thumb,
              content: content,
              infowindow: that.storiesInfowindow
            });

            marker.setMap(map);
            that.storiesMarkers.push(marker);
          });

          that.storiesLoaded = true;
        }
      });
    },

    _loadMongabayLayer: function() {
      if (!GFW.app.mongabayHidden) return;
      var that = this;

      $.ajax({
        async: false,
        url: "https://wri-01.cartodb.com/api/v2/sql?q=SELECT * FROM mongabaydb WHERE published >= now() - INTERVAL '12 Months'&format=geojson",
        success: function(data) {
          _.each(data.features, function(features) {
            var position = new google.maps.LatLng(features.properties.lat, features.properties.lon),
                thumb = features.properties.thumbnail,
                icon = '<%= image_path "icons/mongabay_exclamation.png" %>',
                properties = null,
                published = new Date(features.properties.published).toLocaleDateString(),
                title = features.properties.title;

            if (title.length > 34) {
              title = $.trim(title).substring(0, 34).split(' ').slice(0, -1).join(' ') + '...';
            }

            var content = "<strong><a href='"+features.properties.loc+"' target='_blank'>"+title+"</a></strong> <span>by "+features.properties.author+" &middot; </span> <a href='"+features.properties.loc+"' target='_blank'>read more</a>";

            marker = new GFWMarker({
              position: position,
              icon: icon,
              thumbnail_url: thumb,
              content: content,
              map: map,
              type: 'mongabay',
              infowindow: that.mongabayInfowindow
            });

            that.mongabayMarkers.push(marker);
          });

          var clusterStyles = [
            {
              textColor: '#ffffff',
              url: '<%= image_path "icons/marker_cluster.png" %>',
              width: 36,
              height: 36
            }, {
              textColor: '#ffffff',
              url: '<%= image_path "icons/marker_cluster.png" %>',
              width: 36,
              height: 36
            }, {
              textColor: '#ffffff',
              url: '<%= image_path "icons/marker_cluster.png" %>',
              width: 36,
              height: 36
            }
          ];

          var mcOptions = {
            gridSize: 50,
            styles: clusterStyles,
            maxZoom: 15
          };

          that.mc = new MarkerClusterer(map, that.mongabayMarkers, mcOptions);

          that.mongabayLoaded = true;
        }
      });
    },

    _toggleMongabayLayer: function(layer) {
      layer.set('visible', !layer.get('visible'));
      GFW.app.mongabayHidden = true;
      if (!layer.get('visible')) {
        this.mongabayInfowindow.close();
        GFW.app.mongabayHidden = false;
      }

      if (this.mongabayLoaded) {
        this.mc.clearMarkers();
        this.mongabayMarkers = [];
        this.mongabayLoaded = false;
      } else {
        this._loadMongabayLayer();
      }

      Filter.toggle(layer.get('id'));

      updateHash();
    },

    _hideMongabayLayer: function() {
      if (this.mongabayLoaded) {
        this.mc.clearMarkers();
        this.mongabayMarkers = [];
        this.mongabayLoaded = false;
      }
    },

    _toggleTimeLayer: function() {
      if (this.time_layer_loss && this.currentBaseLayer !== 'loss') {
        this.time_layer_loss.hide();
      }

      if (this.time_layer && this.currentBaseLayer !== 'forma') {
        this.time_layer.hide();
      }

      if (this.time_layer_modis && this.currentBaseLayer !== 'modis') {
        this.time_layer_modis.hide();
      }

      if (this.time_layer_imazon && this.currentBaseLayer !== 'imazon') {
        this.time_layer_imazon.hide();
      }

      if (this.baseLayer && this.currentBaseLayer !== 'fires') {
        this.baseLayer.setOptions({ opacity: 0 });
      }
    },

    _loadTimeLayerLoss: function() {
      var that = this;

      // commented in gmaps library
      setTimeout(function(){
        if (!document.getElementById('cartodb_logo')) {
          var cartodb_link = document.createElement('a');
          cartodb_link.setAttribute('id','cartodb_logo');
          cartodb_link.setAttribute('style','position:absolute; bottom:3px; left:74px; display:block; border:none; z-index:100');
          cartodb_link.setAttribute('href','http://www.cartodb.com');
          cartodb_link.setAttribute('target','_blank');
          cartodb_link.innerHTML = "<img src='http://cartodb.s3.amazonaws.com/static/new_logo.png' alt='CartoDB' title='CartoDB' style='border:none;' />";
          map.getDiv().appendChild(cartodb_link)
        }
        if (!document.getElementById('gee_logo')) {
          var gee_link = document.createElement('a');
          gee_link.setAttribute('id','gee_logo');
          gee_link.setAttribute('style','position:absolute; bottom: 0px; left:160px; display:block; border:none; z-index:100');
          gee_link.setAttribute('href','https://earthengine.google.org');
          gee_link.setAttribute('target','_blank');
          gee_link.innerHTML = "<img src='/assets/logos/geengine.png' alt='Powered by Google Earth Engine' title='Powered by Google Earth Engine' style='border:none;' />";
          map.getDiv().appendChild(gee_link)
        }
      }, 2000);

      this.time_layer_loss = Deforestation.init(map, function() {
        GFW.app._removeForest2000Layer();
        GFW.app._renderForest2000Layer();
      });

      this.time_layer_loss.set_start_time(url('?begin') ? url('?begin') : 2001);
      this.time_layer_loss.set_time(url('?end') ? url('?end') : 2013);

      subscribe('timeline:change_date_loss', _.bind(function(start_year, end_year, options) {
        this.time_layer_loss.set_range(start_year, end_year);
      }, this));
    },

    _loadTimeLayer: function() {
      this.time_layer = new TimePlayer('gfw2_forma', this.global_version, this.cloudfront_url);
      this.time_layer.options.table_name = null;
      map.overlayMapTypes.push(this.time_layer);

      subscribe('timeline:change_date_forma', _.bind(function(start_year, start_month, end_year, end_month, options) {
        // map
        this.time_layer.set_start_time(start_month);
        this.time_layer.set_time(end_month);
      }, this));
    },

    _loadTimeLayerModis: function() {
      var that = this;

      this.time_layer_modis = new StaticGridLayer({
        map: map,
        table: 'modis_forest_change_copy',
        global_version: that.global_version,
        cloudfront_url: that.cloudfront_url
      });

      subscribe('timeline:change_date_modis', _.bind(function(month, year) {
        this.time_layer_modis.set_time(month, year);
      }, this));
    },

    _loadTimeLayerImazon: function() {
      var that = this;

      this.time_layer_imazon = new StaticGridLayerImazon({
        map: map,
        table: 'imazon_clean2',
        global_version: that.global_version,
        cloudfront_url: that.cloudfront_url
      });

      subscribe('timeline:change_date_imazon', _.bind(function(start_year, start_month, end_year, end_month, options) {
        this.time_layer_imazon.set_time(start_year, start_month, end_year, end_month);
      }, this));
    },

    _refreshForest2000Layer: function() {
      // this.forest2000Layer.hide();
      // this.forest2000Layer.show();
      // GFW.app._removeForest2000Layer();
      // GFW.app._renderForest2000Layer();
    },

    _loadBaseLayer: function() {
      var table_name = null;

      if (this.currentBaseLayer === 'loss') {
        if (config.mapLoaded && !this.time_layer_loss) {
          this._loadTimeLayerLoss();
        } else {
          if (this.time_layer_loss) {
            this.time_layer_loss.show();
          }
        }

        return;

      } else if (this.currentBaseLayer === 'forma') {
        if (config.mapLoaded && !this.time_layer) {
          this._loadTimeLayer();
        } else {
          if (this.time_layer) {
            this.time_layer.show();
          }
        }

        return;

      } else if (this.currentBaseLayer === 'modis') {
        if (config.mapLoaded && !this.time_layer_modis) {
          this._loadTimeLayerModis();
        } else {
          if (this.time_layer_modis) {
            this.time_layer_modis.show();
          }
        }

        return;

      } else if (this.currentBaseLayer === 'imazon') {
        if (config.mapLoaded && !this.time_layer_imazon) {
          this._loadTimeLayerImazon();
        } else {
          if (this.time_layer_imazon) {
            this.time_layer_imazon.show();
          }
        }

        return;

      } else if (this.currentBaseLayer === 'fires') {
        if (this.baseLayer) {
          this.baseLayer.setOptions({ opacity: 1 });
        } else {
          this.baseLayer = new CartoDBLayer({
            map: map,
            user_name: '',
            tiler_domain: 'dyynnn89u7nkm.cloudfront.net',
            sql_domain: 'dyynnn89u7nkm.cloudfront.net',
            tiler_path: '/tiles/',
            extra_params: { v: this.global_version, cache_policy: "persist" }, // define a verison number on requests
            tiler_suffix: '.png',
            table_name: this._getTableName(this.currentBaseLayer),
            query: 'SELECT * FROM global_7d',
            layer_order: 1,
            interactivity: 'cartodb_id',
            featureClick: this._onFiresLayerClick,
            featureOver: function(ev, latlng, pos, data) { map.setOptions({ draggableCursor: 'pointer' }); },
            featureOut: function() { map.setOptions({ draggableCursor: 'default' }); },
            auto_bound: false
          });

          subscribe('timeline:change_date_fires', _.bind(function(end_day, options) {
            var year  = end_day.getUTCFullYear(),
                month = (end_day.getUTCMonth() + 1) < 10 ? '0' + parseInt(end_day.getUTCMonth() + 1, 10) : parseInt(end_day.getUTCMonth(), 10),
                day   = end_day.getUTCDate() < 10 ? '0' + end_day.getUTCDate() : end_day.getUTCDate();
            var query = [
              "SELECT * FROM global_7d where acq_date > '" + year + "-" + month + "-" + day + "' AND CAST(confidence AS INT)> 30"
            ].join(' ');

            this.baseLayer.setQuery(query);
          }, this));
        }
      }
    },

    _onFiresLayerClick: function(ev, latlng, pos, data) {
      if (Analysis.model.get('analyzing')) return;

      //here i make a crude request for the columns of the table
      //nulling out the geoms to save payload
      var request_sql = 'SELECT latitude, longitude, brightness, confidence, acq_date, acq_time, the_geom, the_geom_webmercator, null as the_geom, null as the_geom_webmercator FROM global_7d WHERE cartodb_id = ' + data.cartodb_id;
      var url = 'http://dyynnn89u7nkm.cloudfront.net/api/v2/sql?q=' + encodeURIComponent(request_sql);

      var makeSuccessCallback = function(cartodb_id) {
        return function(json) {
          if (!json || (json && !json.rows)) return;

          delete json.rows[0]['cartodb_id'],
          delete json.rows[0]['the_geom'];
          delete json.rows[0]['the_geom_webmercator'];
          delete json.rows[0]['created_at'];
          delete json.rows[0]['updated_at'];

          var data = _.clone(json.rows[0]);
          var content_data = json.rows[0];

          if ($.isEmptyObject(data)) return;

          for (var key in content_data) {
            var temp;

            if (content_data.hasOwnProperty(key)) {
              temp = content_data[key];
              delete content_data[key];
              key = key.replace(/_/g,' '); //add spaces to key names
              content_data[key.charAt(0).toUpperCase() + key.substring(1)] = temp; //uppercase
            }
          }

          if (data) {
            GFW.app.infowindow.setMode('normal')
            GFW.app.infowindow.setVisibleColumns();
            GFW.app.infowindow.setContent(content_data);

            GFW.app.infowindow.setPosition(latlng);
            GFW.app.infowindow.open();
          }
        }
      }

      var onSuccess = makeSuccessCallback(data.cartodb_id);

      $.ajax({
        async: false,
        dataType: 'jsonp',
        crossDomain: true,
        jsonpCallback:'iwcallback',
        url: url,
        success: onSuccess,
        error: function(xhr, status, c) {
          console.log('Error', xhr, status, c);
        }
      });
    },

    _mapLoaded: function() {
      $('#spinner_tiles').fadeOut(function(){
        $('#viewfinder').show();
      });
      if (!config.mapLoaded) {
        config.mapLoaded = true;
        GFW.app._loadBaseLayer();

        if (showMap) Filter.show();
      }
    }
  });
};

GFW.modules.maplayer = function(gfw) {
  gfw.maplayer = {};
  gfw.maplayer.Engine = Class.extend({
    init: function(layer) {
      this.layer = layer;

      var filters = _.map(config.MAPOPTIONS.layers, function(i) { return parseInt(i, 10); }),
          sw = new google.maps.LatLng(this.layer.get('ymin'), this.layer.get('xmin')),
          ne = new google.maps.LatLng(this.layer.get('ymax'),this.layer.get('xmax'));

      this._bounds = new google.maps.LatLngBounds(sw, ne);

      this._addControl(filters);
    },

    _addControl: function(filters) {
      var that = this;

      var slug = this.layer.get('slug');

      if (slug !== 'loss' || slug !== 'forestgain') {
        this.layer.attributes['visible'] = false;
      }

      var clickEvent = function() {
        that._toggleLayer();
      };

      if (slug === 'nothing') {
        var event = function() {
          GFW.app.updateBaseLayer(null);

          that._hideBaseLayers();
          that._removeSubLayers();

          Analysis.hide();

          if (forestgain) GFW.app.removeLayer(forestgain);

          updateHash();
        };

        Filter.addFilter('', slug, this.layer.get('category_name'), this.layer.get('title'), { clickEvent: event, source: null, category_color: this.layer.get('category_color'), color: this.layer.get('title_color') });
      } else if (slug === 'user_stories') {
        var customEvent = function() {
          GFW.app._toggleStoriesLayer(that.layer);
          Legend.toggleItem(that.layer.get('id'), that.layer.get('category_slug'), that.layer.get('category_name'),  that.layer.get('title'), that.layer.get('slug'), that.layer.get('category_color'), that.layer.get('title_color'));

          GFW.app._loadStoriesLayer();
        };

        Filter.addFilter(this.layer.get('id'), slug, this.layer.get('category_name'), this.layer.get('title'), { clickEvent: customEvent, source: this.layer.get('source'), category_color: this.layer.get('category_color'), color: this.layer.get('title_color'), subtitle: this.layer.get('subtitle') });

        if (_.include(filters, this.layer.get('id'))) {
          GFW.app.storiesLoaded = true;
          this.layer.set('visible',true);
          GFW.app._loadStoriesLayer();
          Filter.check(this.layer.get('id'));
          Legend.toggleItem(this.layer.get('id'), this.layer.get('category_slug'), this.layer.get('category_name'),  this.layer.get('title'), slug, this.layer.get('category_color'), this.layer.get('title_color'));
        }
      } else if (slug === 'mongabay') {
        var mongabayEvent = function() {
          GFW.app._toggleMongabayLayer(that.layer);
          Legend.toggleItem(that.layer.get('id'), that.layer.get('category_slug'), that.layer.get('category_name'),  that.layer.get('title'), that.layer.get('slug'), that.layer.get('category_color'), that.layer.get('title_color'));
        };

        Filter.addFilter(this.layer.get('id'), slug, this.layer.get('category_name'), this.layer.get('title'), { clickEvent: mongabayEvent, source: this.layer.get('title'), category_color: this.layer.get('category_color'), color: this.layer.get('title_color') });

        if (_.include(filters, this.layer.get('id'))) {
          GFW.app.mongabayHidden = true;
          this.layer.set('visible',true);
          GFW.app._loadMongabayLayer();
          Filter.check(this.layer.get('id'));
          Legend.toggleItem(this.layer.get('id'), this.layer.get('category_slug'), this.layer.get('category_name'),  this.layer.get('title'), slug, this.layer.get('category_color'), this.layer.get('title_color'));
        }
      } else if (slug === 'imazon' || slug === 'modis' || slug === 'fires') {
        var event = function() {
          that._toggleLayer();
        };

        Filter.addFilter(this.layer.get('id'), slug, this.layer.get('category_name'), this.layer.get('title'), { clickEvent: event, source: slug, category_color: this.layer.get('category_color'), color: this.layer.get('title_color'), subtitle: this.layer.get('subtitle') });

        var subEvent;

        if (this.layer.get('sublayer')) {
          subEvent = function() {
            that._toggleSubLayer();
          };
        }

        if (GFW.app.currentBaseLayer === slug) Legend.replace(this.layer.get('id'), this.layer.get('category_slug'), this.layer.get('category_name'),  this.layer.get('title'), slug, this.layer.get('category_color'), this.layer.get('title_color'), subEvent);
      } else if (slug === 'umd_tree_loss_gain') {
        if (umd_tree_loss_gain && GFW.app.currentBaseLayer === 'loss') umd_tree_loss_gain.set('visible', true);

        var event = function() {
          that._toggleLayer();
        };

        var subEvent = function() {
          that._toggleSubLayer();
        };

        Filter.addForestLossFilters(this.layer.get('id'), slug, this.layer.get('category_name'), this.layer.get('title'), { clickEvent: event, source: this.layer.get('source'), category_color: this.layer.get('category_color'), color: this.layer.get('title_color'), subtitle: this.layer.get('subtitle') });

        if (GFW.app.currentBaseLayer === 'loss' || _.include(config.MAPOPTIONS.layers, 596)) Legend.toggleItem(this.layer.get('id'), this.layer.get('category_slug'), this.layer.get('category_name'),  this.layer.get('title'), slug, this.layer.get('category_color'), this.layer.get('title_color'), subEvent);
      } else if (slug === 'loss') {
        var event = function() {
          that._toggleLayer();
        };

        Filter.addForestLossFilter(this.layer.get('id'), slug, this.layer.get('category_name'), this.layer.get('title'), { clickEvent: event, source: this.layer.get('source'), category_color: this.layer.get('category_color'), color: this.layer.get('title_color'), subtitle: this.layer.get('subtitle') });

        if (GFW.app.currentBaseLayer === 'loss') {
          if (filters && _.include(filters, this.layer.get('id'))) {
            if (GFW.app) {
              GFW.app.loadLayer(this.layer);
            } else {
              config.pendingLayers.push(this.layer);
            }
          }
        }
      } else if (slug === 'forestgain') {
        var event = function() {
          that._toggleLayer();
        };

        Filter.addForestLossFilter(this.layer.get('id'), slug, this.layer.get('category_name'), this.layer.get('title'), { clickEvent: event, source: this.layer.get('source'), category_color: this.layer.get('category_color'), color: this.layer.get('title_color'), subtitle: this.layer.get('subtitle') });

        if (filters && _.include(filters, this.layer.get('id'))) {
          forestgain.set('visible', true);

          if (GFW.app) {
            GFW.app.loadLayer(forestgain);
          } else {
            config.pendingLayers.push(forestgain);
          }
        }
      } else {
        Filter.addFilter(this.layer.get('id'), slug, this.layer.get('category_name'), this.layer.get('title'), { clickEvent: clickEvent, source: this.layer.get('source'), category_color: this.layer.get('category_color'), color: this.layer.get('title_color'), subtitle: this.layer.get('subtitle') });

        if (filters && _.include(filters, this.layer.get('id'))) {
          if (GFW.app) {
            GFW.app.loadLayer(this.layer);
          } else {
            config.pendingLayers.push(this.layer);
          }
        }

        var subEvent;

        if (GFW.app.currentBaseLayer === slug && slug === 'forma') {
          if (this.layer.get('sublayer')) {
            subEvent = function() {
              that._toggleSubLayer();
            };
          }

          Legend.replace(this.layer.get('id'), this.layer.get('category_slug'), this.layer.get('category_name'),  this.layer.get('title'), slug, this.layer.get('category_color'), this.layer.get('title_color'), subEvent);
        }
      }
    },

    _bindDisplay: function(display) {
      display.setEngine(this);
    },

    _hideBaseLayers: function(){
      GFW.app.$map_coordinates.show();
      GFW.app.updateCoordinates();

      GFW.app.baseLayer && GFW.app.baseLayer.setOptions({ opacity: 0 });
      GFW.app.currentBaseLayer = null;
      GFW.app._toggleTimeLayer();
      Legend.removeCategory('forest_clearing');
    },

    _removeSubLayers: function() {
      var renderLayers = false;

      // Remove UMD extended layers
      GFW.app.removeUmdCoverageLayer();

      var extendedLayers = ['quicc_bounding_box_extent', 'imazon_sad_geografic_extent', 'forma_extent'];

      // Remove extended layers
      _.each(extendedLayers, function(name) {
        if (_.include(GFW.app.layers, name)) {
          GFW.app.layers = _.without(GFW.app.layers, name);
          renderLayers = true;
        }
      });

      if (renderLayers) {
        GFW.app.renderLayers();
      }
    },

    _toggleSubLayer: function() {
      this.layer.set('sublayer_visible', !this.layer.get('sublayer_visible'));

      var visible = this.layer.get('sublayer_visible');

      if (visible) {
        GFW.app.addSubLayer(this.layer);
      } else {
        GFW.app.removeSubLayer(this.layer);
      }
    },

    _toggleLayer: function() {
      var self = this;

      this.layer.attributes['visible'] = !this.layer.attributes['visible'];

      var slug            = this.layer.get('slug'),
          title           = this.layer.get('title'),
          title_color     = this.layer.get('title_color'),
          visible         = this.layer.get('visible'),
          tableName       = this.layer.get('table_name'),
          category        = this.layer.get('category_name'),
          category_slug   = this.layer.get('category_slug'),
          category_color  = this.layer.get('category_color'),
          id              = this.layer.get('id'),
          disabled        = this.layer.get('disabled');

      if (disabled) return;
      
      Analysis.unblock_analysis();

      GFW.app.closeInfowindows();

      if (category === null || !category) { // Default data
        category       = 'Conservation';
        category_slug  = 'conservation';
        category_color = '#707D92';
      }

      if (category !== 'Forest change') {
        Legend.toggleItem(id, category_slug, category, title, slug, category_color, title_color);
      }

      if (slug === 'forestgain') {
        if (visible) {
          GFW.app.addLayer(this.layer);
          ga('send', 'event', 'Filter', 'Toggle', slug);

          if (cover_extent.attributes['visible']) GFW.app._refreshForest2000Layer();
        } else {
          GFW.app.removeLayer(this.layer);
        }

        Legend.toggleItemBySlug(slug);
        Filter.toggle(id);
      } else if (slug === 'loss') {
        if (GFW.app.currentBaseLayer === null) {
          GFW.app.updateBaseLayer(slug);
          ga('send', 'event', 'Filter', 'Toggle', slug);

          if (cover_extent.attributes['visible']) GFW.app._refreshForest2000Layer();
        } else {
          GFW.app.updateBaseLayer(null);

          Analysis.block_analysis();

          if (!Analysis.model.get('area') || (Analysis.model.get('area') && Analysis.model.get('area') === '')) {
            Analysis.clearInfo();
            Analysis.onClickCancel();
          }
        }

        Legend.toggleItemBySlug(slug);

      } else if (slug === 'forma' || slug === 'modis' || slug === 'imazon' || slug === 'fires') {
        GFW.app.updateBaseLayer(slug);
        ga('send', 'event', 'Filter', 'Toggle', slug);

        if (forestgain) {
          GFW.app.removeLayer(forestgain);
          forestgain.set('visible', false);
          Filter.remove(forestgain.get('id'));
        }

        umd_tree_loss_gain && umd_tree_loss_gain.set('visible', false);

        this.layer.set('sublayer_visible', false);
        this._removeSubLayers();

        var subEvent;

        if (this.layer.get('sublayer')) {
          subEvent = function() {
            self._toggleSubLayer();
          };
        }

        Legend.replace(id, category_slug, category, title, slug, category_color, title_color, subEvent);
      } else if (slug === 'umd_tree_loss_gain') {
        GFW.app.updateBaseLayer('loss');
        GFW.app.addLayer(forestgain);
        Filter.add(596);

        forestgain.set('visible', true);
        umd_tree_loss_gain && umd_tree_loss_gain.set('visible', true);
        if (cover_extent.attributes['visible']) GFW.app._refreshForest2000Layer();

        this._removeSubLayers();

        var subEvent;

        if (this.layer.get('sublayer')) {
          subEvent = function() {
            self._toggleSubLayer();

            Legend.resize();
          };
        }

        Legend.replace(id, category_slug, category, title, slug, category_color, title_color, subEvent);
      } else if (slug === 'forest2000') {
        if (cover_extent.attributes['visible']) {
          GFW.app._renderForest2000Layer();
          ga('send', 'event', 'Filter', 'Toggle', slug);
        } else {
          GFW.app._removeForest2000Layer();
        }

        Filter.toggle(id);
      } else {
        if (slug === 'biodiversity_hotspots') {
          GFW.app.closeInfowindows();
        }

        if (visible) {
          GFW.app.addLayer(this.layer);
          ga('send', 'event', 'Filter', 'Toggle', slug);
        } else {
          GFW.app.removeLayer(this.layer);
        }

        Filter.toggle(id);
      }

      if (slug === ('fires') || GFW.app.currentBaseLayer === 'fires' || GFW.app.currentBaseLayer === null) {
        Analysis.hide();
      } else {
        Analysis.show();
      }
      updateHash();
    }
  });
};


GFW.modules.datalayers = function(gfw) {
  gfw.datalayers = {};

  gfw.datalayers.Engine = Class.extend({
    init: function(CartoDB, layerTable) {
      this._bycartodbid = {};
      this._bytitle     = {};
      this._dataarray   = [];
      this._cartodb     = CartoDB;

      var LayersColl    = this._cartodb.CartoDBCollection.extend({
        sql: function(){
          return ['SELECT cartodb_id AS id, slug, title, title_color, subtitle, sublayer, table_name, source, category_color, category_slug, category_name, external, zmin, zmax, ST_XMAX(the_geom) AS xmax,',
            'ST_XMIN(the_geom) AS xmin, ST_YMAX(the_geom) AS ymax, ST_YMIN(the_geom) AS ymin, tileurl, true AS visible',
            'FROM ' + layerTable,
            'WHERE display = TRUE ORDER BY displaylayer, title ASC'].join(' ');
        }
      });

      this.LayersObj = new LayersColl();
      this.LayersObj.fetch();
      this._loadLayers();
    },

    _loadLayers: function(){
      var that = this;

      this.LayersObj.bind('reset', function() {

        // special layers
        forma              = GFW.app.datalayers.LayersObj.get(569),
        modis              = GFW.app.datalayers.LayersObj.get(588),
        imazon             = GFW.app.datalayers.LayersObj.get(584);
        fires              = GFW.app.datalayers.LayersObj.get(593);
        forestgain         = GFW.app.datalayers.LayersObj.get(596);
        umd_tree_loss_gain = GFW.app.datalayers.LayersObj.get(597);
        cover_extent       = GFW.app.datalayers.LayersObj.get(591);

        that.LayersObj.each(function(p) {
          if (p.get('slug') === 'user_stories') {
            Filter.addFilter(0, 'nothing', 'People', 'Land Rights', { disabled: true , category_color: '#707D92', color: '#707D92' });
          }

          that._addLayer(p);
        });

        if (showMap) Filter.show();
      });
    },

    _addLayer: function(p) {
      var layer = new gfw.maplayer.Engine(p, map);
    }
  });
};


/**
*
* Logging module that gfwtes log messages to the console and to the Speed
* Tracer API. It contains convenience methods for info(), warn(), error(),
* and todo().
*
*/

GFW.modules.log = function(gfw) {
  gfw.log = {};

  gfw.log.info = function(msg) {
    gfw.log._gfwte('INFO: ' + msg);
  };

  gfw.log.warn = function(msg) {
    gfw.log._gfwte('WARN: ' + msg);
  };

  gfw.log.error = function(msg) {
    gfw.log._gfwte('ERROR: ' + msg);
  };

  gfw.log.todo = function(msg) {
    gfw.log._gfwte('TODO: '+ msg);
  };

  gfw.log._gfwte = function(msg) {
    var logger = window.console;
    if (gfw.log.enabled) {
      if (logger && logger.markTimeline) {
        logger.markTimeline(msg);
      }
    }
  };
};
